= Introduction =
<p>If you once worked with CBCOM, you know that CBCOM layer management as long as pseudo-session management over CB2A is a real pain. But, well, it is here, and we have no choice but to deal with it.</p>
<p>Well, here is a jPos ''jpos/modules/cbcom'' module dedicated to the CBCOM layer and its pseudo session management. 
It not only provides some components to deal with CBCOM concepts such as IPDU, PI but also a jPos CBCOMChannel.
This is a a CBCOM over TCP/IP channel implementation, base on jPos BaseChannel,  that can endorse either a client role, either a server role. </p>
You can find two subsidiary sample modules in this project : 
*''jpos/modules/cbcomSimulator'' : mounts a CBCOM server simulator; the CBCOM channel is wrapped in server deployment configuration
*''jpos/modules/cbcomClientSimulator''  : mounts a dummy CBCOM client; the CBCOM channel is wrapped in a channel adaptor configuration

<p>You may take a careful look at these two distinct channel configurations as their properties declaration may vary depending on the CBCOM channel role (client or server). </p>


= Implemented features =
== CBCOM message format ==
All CBCOM IPDUs along their respective composition rules are implemented.
When dealing with CBCOM messages, IPDU validity is checked against various rules (See IPDU factory ''org.jpos.jposext.cbcom.service.support.IPDUFactoryImpl'' class).   
== Timers ==
=== Role client ===
* post-connection-timer,
* non response timer (TNR)
NB : this implementation does not yet deal with all the network management part (the one part of CBCOM-CB2A specifications that cares about maintaining connections once the pseudo-session is established),. So, the activity maintain timer (TMA)  is not implemented.
=== Role server ===
* pre connection timer,
* inter session timer,
* response guarantee timer (TGR),
* inactivity veil timer (TSI/TSM)


= Some recipee =
== Caution ==
=== CBCOM and multiplexing ===
Reading the CBCOM over TCP/IP specifications, requests can't be multiplexed in a CBCOM pseudo session.

Specification says  : ''on one TCP/IP connection, one and one only CBCOM connection can be established. Several CBCOM connections can be established at the same time only if each of them has its own TCP/IP connection.''
 
Well, 2 CBCOM connections mustn't share one solely TCP/IP connection. So, you should avoid using the CBCOMChannel within a MUX.

=== CBCOM and connection maintaining ===
<p>Some of the CBCOM timers care about terminating the network communication (mostly for inactivity reason).
Therefore it's quite paradoxical using the CBCOMChannel  with a ChannelAdaptor. Indeed, ChannelAdaptor's one purpose is to maintain the connection. Connection maintain is part of the CBCOM specification and should stay at the CBCOM level.</p>
<p>NB : still, in the provided ''jpos/module/cbcomClientSimulator'' sample module, i use a ChannelAdaptor that wraps a CBCOMChannel (because i needed something that can deploy easily) . Launch it, and you will see that after some time of inactivity, the CBCOMChannel connection is lost (this is due to CBCOM internal timers such as the pre-connection-timer or  the inactivity-veil-timer). Once the connection is lost, ChannelAdaptor 's behavior is to try to reconnect after a delay parameterized in property ''reconnect-delay''.</p> 

== Creating a CBCOM client to request a distant CBCOM server ==
Comparing to jPos existing channels, nothing changes in the way you use the CBCOMChannel.
 
<p>You first instantiate the channel, connect to the server, send your message, wait for response, process it, and finally disconnect.
The only thing to care about is to properly configure your instantiated channel with all the required CBCOM properties. As previously said, these properties vary upon the role your channel will endorse (client/server). You may take a further look at the sample modules for more details.</p> 

<code>channel = new CBCOMChannel(CBCOM_SERVER_HOSTNAME, CBCOM_SERVER_PORT,	packager);</code><br>
<code></code><br>
<code>cfg = new SimpleConfiguration();</code><br>
<code>cfg.put("cbcom-protocol-version", "12");</code><br>
<code>cfg.put("cb2a-protocol-version", "123");</code><br>
<code>cfg.put("post-connection-timer", "30");</code><br>
<code>cfg.put("TSI-timer", "5");</code><br>
<code>cfg.put("TNR-timer", "15");</code><br>
<code>// cfg.put("TMA-timer", "720");</code><br>
<code>cfg.put("hexdump-CBCOM", "true");</code><br>
<code></code><br>
<code>channel.connect();</code><br>
<code>channel.send(msg);</code><br>
<code>ISOMsg resp = channel.receive();</code><br>
<code>// Process response</code><br>
<code>channel.disconnect();</code><br>

NB : full source code is available under ''src/testIntegration/org/jpos/jposext/cbcom/ClientCBCOMChannelTest.java''.

=== The VetoException case ===
<p>As a client waiting for server response, you should handle VetoException exceptions thrown by the CBCOMChannel. These may occurred when the server decides to abort the pseudo session. In this case, the VetoException nests a CBCOMException from which you can retrieve the reason (abort code) explaining why the server has aborted the pseudo session. 
A list of the available abort codes can be found in the CBCOM specification, in the chapter discussing about the PI01.</p>

Here follows such exception management. (See test method ''testBadCbcomVersion()'' in source ''src/testIntegration/org/jpos/jposext/cbcom/ClientCBCOMChannelTest.java'')

<code>// Here, we force a bad cbcom protocol version</code><br>
<code>cfg.put("cbcom-protocol-version", "09");</code><br>
<code>channel.setConfiguration(cfg);</code><br>
<code></code><br>
<code>channel.connect();</code><br>
<code></code><br>
<code>try {</code><br>
<code>  channel.send(msg);</code><br>
<code>  channel.receive();</code><br>
<code>  fail("A cbcom exception wrapped in a veto exception should have been thrown by channel");</code><br>
<code>  channel.disconnect();</code><br>
<code>} catch (VetoException e) {</code><br>
<code>  assertEquals(CBCOMException.class, e.getNested().getClass());</code><br>
<code>  assertEquals(0x1E, ((CBCOMException) e.getNested()).getPI01Value());</code><br>
<code>}</code><br>

== Creating a CBCOM server to serve CBCOM client(s) ==
Once again, nothing changes in the way you configure a CBCOM channel in a server deployment configuration, except that you have to declare some complementary properties required when using a CBCOMchannel in a server way.
You may take a further look at the provided  ''jpos/modules/cbcomSimulator'' sample module.

= About CBCOMChannel implementation design =
All the CBCOM management is made within the CBCOMChannel class. In other words, all the the CBCOM logic and pseudo-session management stay within this class. 
JPos components such as ISOServer or ISORequestListener do not know a thing about CBCOM, which is good.
It is only when the CBCOMChannel receives an IPDU-DE (wrapping an APDU that is the ISO-8583 message) that it relays this APDU as an ISOMsg to the ISOServer. The ISOServer then may route it to some ISORequestListener. Actually, this APDU is the only interesting thing here, other IPDU messages have non business value really.

== Pseudo-session state management ==
<p>In this implementation, CBCOM pseudo session can take 3 states among {''Initial'', ''Connected'', ''LoggedOff''}.
State may change when receiving an IPDU : connection request, connection acknowledge, data request, abort request ... Some requests aren't expected depending on the current pseudo-session state. For instance, a client shoudn't send a data request (IPDU-DE) while server pseudo-session sate is ''Initial'' (i.e.  the server has not yet received a connection request IPDU-CN from client and answered back a connection acknowledge IPDU-AC).</p>

<p>To handle all of these workflow rules, the CBCOMChannel wraps a pseudo-session context. Within it, a state attribute wraps the current CBCOM pseudo-session state.  
This state may be an instance among the 3 states mentioned above. All the 3 states  implement the ''IPseudoSessionState'' interface according to the common ''state design pattern'' : in such design, the ''IPseudoSessionState'' interface methods actually stand for all the events that can occur against a pseudo-session state. We can see these method as potential transitions between the 3 states.
So back to our CBCOMChannel : when it receives some messages, it extracts the IPDU from it, and invoke the associated transition/method on current state.</p> 

<p>Working with this design, pseudo-session management and logic are delegated from the CBCOM channel to the states implementations.
But, as these implementations may also further need the underlying CBCOMChannel, a callback interface is provided to them that gives the control back to the CBCOM channel. This callback interface concentrate on CBCOMChannel main purpose that is : sending data, closing the connection...</p>